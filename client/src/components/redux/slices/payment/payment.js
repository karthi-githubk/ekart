import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

const backendAPI = "http://localhost:5005";

// Async thunk to create a payment intent
export const createPaymentIntent = createAsyncThunk(
  'payment/createPaymentIntent',
  async (items, { rejectWithValue }) => {
    try {
      // Make a POST request to your backend API to create a payment intent
      const response = await axios.post(`${backendAPI}/create-payment-intent`, { items });
      return response.data.clientSecret; // Extract clientSecret from response
    } catch (error) {
      // If there's an error, handle it and reject with the error message
      return rejectWithValue(error.response.data); 
    }
  }
);

// Define the initial state for the payment slice
const initialState = {
  clientSecret: null, // Holds the client secret obtained from the server
  status: 'idle', // Status of the payment process (idle/loading/succeeded/failed)
  error: null, // Holds any error message if payment fails
};

// Create a slice for payment handling
const paymentSlice = createSlice({
  name: 'payment',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      // Handle pending state when creating a payment intent
      .addCase(createPaymentIntent.pending, (state) => {
        state.status = 'loading'; // Set status to loading while fetching
      })
      // Handle fulfilled state when payment intent creation succeeds
      .addCase(createPaymentIntent.fulfilled, (state, action) => {
        state.status = 'succeeded'; // Set status to succeeded
        state.clientSecret = action.payload; // Update clientSecret with the received value
      })
      // Handle rejected state when payment intent creation fails
      .addCase(createPaymentIntent.rejected, (state, action) => {
        state.status = 'failed'; // Set status to failed
        state.error = action.payload; // Store the error message
      });
  },
});

// Export the reducer generated by createSlice
export default paymentSlice.reducer;
